{"name":"Tablarasa","tagline":"Tabla composition generator in Ruby.","body":"# TablaRasa\r\n##Description\r\nRuby code for creating [tabla](http://en.wikipedia.org/wiki/Tabla) compositions, for practice or performance. There are also tools that allow for markov analysis of tabla compositions as well as creating new compositions based on the Markov analysis of other works. The quickest way to get started is to run the \"TablaRasa_usage_examples.rb\" file. It will go through a basic usage sequence for the software and generate a graph output. \r\n\r\n## In progress\r\n* Increase the depth of the markov analysis.\r\n* Create graph output for time dependant XYZ plane graphing\r\n* Include midi support for computer performance of generated compositions\r\n* Add matra divisions to markov compositions\r\n\r\n## Some Terminology \r\nFor the names of the bols I'm following the framework as set up by Aloke Dutta [as outlined in this book](http://www.alokedutta.com/product/tabla-lessons-and-practice/). Here are some other terms that might be of use if one is unfamiliar with north Indian music:\r\n\r\n[bols](http://en.wikipedia.org/wiki/Bol_%28music%29),\r\n[matras](http://en.wikipedia.org/wiki/Matra_(music))\r\n\r\n### Tabla_composition_generator\r\nIn the tabla_composition_generator.rb file there a few options for constructing a composition.\r\n\r\n\"gen_string_of_hits\" can get passed an integer, and it will return a string of random bols as long as the integer passed to it:\r\n```Ruby\r\n gen_string_of_hits numberofhits\r\n\r\n gen_string_of_hits 5\r\n =>  Te Dha3 Ge Tun Re\r\n ```\r\n \r\n\"gen_equal_subdivision\" will return a string of length \"numberofhits\" with equal subdivisions set by \"matradiv\" \r\n```Ruby\r\ngen_equal_subdivision numberofhits, matradiv\r\n\r\ngen_equal_subdivision 10, 5\r\n =>   | Dhet Re Te Dhi Tin | Tun Dha Din Te Ta|\r\n ```\r\n \r\n \"gen_multi_subdivison\" will return a string of length \"numberofhits\" with alternating subdivisions \"sub1\" and \"sub2\"\r\n```Ruby\r\ngen_multi_subdivison numberofhits, sub1, sub2\r\n\r\ngen_multi_subdivison 10, 2, 3\r\n=> |  Ka  Din  |  Tin  Dha3  Ka  |  Te  The2  |  Ta  The  The2  |\r\n```\r\n\r\n\"gen_markov_comp\" will return a string of \"desired_output_length\" based on a Markov analysis of the \"composition\" passed. Currently this only supports a \"markov_depth\" of 1\r\n```Ruby\r\ngen_markov_comp composition, desired_output_length, markov_depth\r\n\r\ngen_markov_comp \"My_comp.txt\", 10, 1\r\n=>  Te Dha3 Ge Tun Re Dhet Re Te Dhi Tin\r\n ```\r\n \r\n### Tabla_comp_analyzer\r\n \r\n\"analyze_composition\" will return a hash that contains either the number of times a given bol occurs in a composition (bol_count), or the frequency (bol_freq) of each hit in the composition\r\n```Ruby\r\n analyze_composition composition_file, return_number_of_hits, return_frequency_of_hits \r\n\r\n analyze_composition \"My_File.txt\", 1, 0 \r\n => bol_count\r\n bol_count[\"Ta\"]=> 15\r\n \r\n  analyze_composition \"My_File.txt\", 0, 1 \r\n => bol_freq\r\n bol_freq[\"Ta\"]=> 0.05\r\n```\r\n\r\n\"markov_analysis\" will do a Markov analysis of a composition (currently only uses a depth of 1). It returns a hash of hashes (bol_hash_hash) containing the percentage of times a given bol is followed by any of the others. In bol_hash_hash the first value passed is the bol you want the values for, the next value passed will return a float giving the percentage of the time that the first bol is followed by the second bol.\r\n```Ruby\r\nmarkov_analysis composition_file\r\n\r\nmarkov_analysis \"My_file.txt\"\r\n=> bol_hash_hash\r\n\r\nbol_hash_hash[\"Ta\"][\"Tin\"]=> 0.13\r\n```\r\n\r\n\"comp_graph\" will output a .png file of a graph of a the Markov values returned by the markov analyzer. The second parameter passed will be the name of the output .png file. The value passed to bol should be a bol, this will be the bol for which all the values will be calculated in the graph. If it's left empty (ie: \"\") a random bol will be chosen on which to base the graph. graph_type will determine the output style, either a top down, or radial style.\r\n```Ruby\r\ncomp_graph composition_file, output_name, bol, graph_type\r\n\r\ncomp_graph \"My_file.txt\", \"My_save_file\" \"Dha\", \"circular\"\r\n=> My_save_file.png\r\n\r\ncomp_graph \"My_file.txt\", \"My_save_file\" \"Dha\", \" straight\"\r\n=> My_save_file.png\r\n\r\n```\r\n## Graph Example\r\nThese are examples of the graph output using [Ruby-Graphiz](https://github.com/glejeune/Ruby-Graphviz/). The first is the circular output, the second the straight output.\r\n\r\n\r\n![Circular Graph](http://i.imgur.com/jA39HaC.png \"Circular Graph output Example\")\r\n\r\n![LR Graph](http://i.imgur.com/AuPdtFE.png \"Left to right output Example\")\r\n\r\n {TablaRasa}\r\n    Copyright (C) {2015}  {Trace Norris}\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}